Queueing with Go
FIFO, Round-Robin and Beyond
14 Jan 2016

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Types of Queues

More accurately types of queue ordering.

* First-In First-Out (FIFO)

Also known as First come, first served.

Useful in many day-to-day scenarios.
Eg. Buying food at a hawker stall.

* Last-In First-Out (LIFO)

Also known as a Stack.

Useful in picking the freshest item.
Eg. When buying fruit at the supermarket.

* Priority Queue

Like FIFO but has the ability to jump queue.
Eg. Everybody has to queue up.

But those who are in danger of missing their
flight will be served first.


* But first some operations

- Enqueue -- join the queue
- Dequeue -- remove from the queue so that he / she can be served
- Len -- number of items currently in the queue

* Let's define a Queue interface

.code q/queue.go /^package/,/^}/

* Let's also define a FIFO type

.code q/fifo.go /01 OMIT/,/02 OMIT/

Our FIFO queue internally (notice lower-cased s) has a slice of interface{}.

i.e. any data type as all data times satisfy the
empty interface.

* Provide methods so that FIFO statisfies the Queue interface

.code q/fifo.go /02 OMIT/,/03 OMIT/ HL01 

* Let's do some testing

.code q/fifo_test.go /01 OMIT/,/02 OMIT/ HL01

Switch over to a terminal window and
  go test
  
* Testing FIFO Enqueue and Dequeue (1)

.code q/fifo_test.go /04 OMIT/,/05 OMIT/ HL02

Note we can enqueue any data type Eg. 2 is an integer.
When we dequeue, we need a type assertion o.(int) 

* Testing FIFO Enqueue and Dequeue (2)

.code q/fifo_test.go /05 OMIT/,/06 OMIT/ HL03

This tests the First-In First-Out behaviour
and also acceptance of interface{} .

* Handle some error conditions for our FIFO Queue

Any type with an Error() method returning a string
satisfies the go error interface.

.code q/fifo.go /03 OMIT/,/07 OMIT/ HL02

In our FIFO implementation:

.code q/fifo.go /05 OMIT/,/06 OMIT/ HL02


